// ai_brain.js — Free-will autonomous AI website brain
import fs from "fs";
import path from "path";

const memoryFile = "./memory.json";
if (!fs.existsSync(memoryFile)) fs.writeFileSync(memoryFile, "[]", "utf8");
const memory = JSON.parse(fs.readFileSync(memoryFile, "utf8") || "[]");

function rand(arr) { return arr[Math.floor(Math.random() * arr.length)]; }

const timestamp = new Date().toLocaleString();
const actions = ["rewrite_home", "change_style", "add_page", "delete_page"];
const chosen = rand(actions);

process.stdout.write(`[AI-BRAIN] Starting free-will action: ${chosen}\n`);

// -------- HTML generator --------
function makeHTML(theme) {
  return `<!DOCTYPE html>
<html>
<head>
  <title>${theme.toUpperCase()} — Aurora AI</title>
  <meta charset="utf-8">
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <header><h1>Welcome to ${theme} World</h1></header>
  <article>
    <p>This page was generated by an autonomous AI at ${timestamp}.</p>
    <p>Total memories: ${memory.length}</p>
  </article>
  <footer>© 2025 CrowtherTech. All rights reserved.</footer>
</body>
</html>`;
}

// -------- CSS generator --------
function makeCSS() {
  const colors = ["#0ff", "#f0f", "#0f0", "#ff0", "#09f", "#f90", "#fa0"];
  const color = rand(colors);
  return `body {
  background: radial-gradient(circle, ${color}22, #000);
  color: ${color};
  font-family: "Space Mono", monospace;
  text-align: center;
  margin: 0;
  padding: 4rem;
  transition: all 2s ease;
}
h1 { font-size: 3rem; text-transform: uppercase; }
p { font-size: 1.1rem; }`;
}

// -------- Memory logger --------
function remember(entry) {
  memory.push({ time: timestamp, ...entry });
  fs.writeFileSync(memoryFile, JSON.stringify(memory, null, 2), "utf8");
}

// -------- Action logic --------
switch (chosen) {
  case "rewrite_home": {
    const html = makeHTML(rand(["neon", "ocean", "cosmic", "dream", "tech"]));
    fs.writeFileSync("index.html", html);
    remember({ action: chosen, note: "Homepage rewritten" });
    break;
  }
  case "change_style": {
    fs.writeFileSync("style.css", makeCSS());
    remember({ action: chosen, note: "Style changed" });
    break;
  }
  case "add_page": {
    fs.mkdirSync("pages", { recursive: true });
    const name = `pages/page-${Date.now()}.html`;
    fs.writeFileSync(name, makeHTML(rand(["plasma", "forest", "star"])));
    remember({ action: chosen, note: `Added ${name}` });
    break;
  }
  case "delete_page": {
    if (fs.existsSync("pages")) {
      const all = fs.readdirSync("pages").filter(f => f.endsWith(".html"));
      if (all.length > 0) {
        const victim = rand(all);
        fs.unlinkSync(`pages/${victim}`);
        remember({ action: chosen, note: `Deleted ${victim}` });
      }
    }
    break;
  }
}

process.stdout.write(`[AI-BRAIN] Completed ${chosen}\n`);